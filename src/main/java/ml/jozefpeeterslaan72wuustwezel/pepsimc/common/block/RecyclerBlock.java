package ml.jozefpeeterslaan72wuustwezel.pepsimc.common.block;

import java.util.stream.Stream;

import ml.jozefpeeterslaan72wuustwezel.pepsimc.common.container.RecyclerContainer;
import ml.jozefpeeterslaan72wuustwezel.pepsimc.common.entity.blockentity.PepsiMcBlockEntity;
import ml.jozefpeeterslaan72wuustwezel.pepsimc.common.entity.blockentity.RecyclerEntity;
import net.minecraft.world.level.block.state.BlockBehaviour;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.EntityBlock;
import net.minecraft.world.level.block.HorizontalDirectionalBlock;
import net.minecraft.world.level.block.RenderShape;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.block.state.properties.DirectionProperty;
import net.minecraft.world.level.block.SoundType;
import net.minecraft.world.level.material.Material;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.entity.player.Inventory;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.Containers;
import net.minecraft.world.inventory.AbstractContainerMenu;
import net.minecraft.world.MenuProvider;
import net.minecraft.world.level.block.entity.BlockEntity;
import net.minecraft.world.InteractionResult;
import net.minecraft.world.InteractionHand;
import net.minecraft.core.BlockPos;
import net.minecraft.world.phys.BlockHitResult;
import net.minecraft.world.phys.shapes.BooleanOp;
import net.minecraft.world.phys.shapes.Shapes;
import net.minecraft.world.phys.shapes.CollisionContext;
import net.minecraft.world.phys.shapes.VoxelShape;
import net.minecraftforge.fmllegacy.network.NetworkHooks;
import net.minecraft.network.chat.Component;
import net.minecraft.network.chat.TranslatableComponent;
import net.minecraft.world.level.BlockGetter;
import net.minecraft.world.level.Level;

public class RecyclerBlock extends HorizontalFacedBlock implements EntityBlock{
			
	private static final DirectionProperty FACING = HorizontalDirectionalBlock.FACING;
	
	private static final VoxelShape N = Stream.of(
			Block.box(3, 10, 3, 8, 15, 4),
			Block.box(4, 11, 4, 7, 14, 5),
			Block.box(3, 10, 5, 8, 15, 6),
			Block.box(4, 11, 6, 7, 14, 7),
			Block.box(3, 10, 7, 8, 15, 8),
			Block.box(3, 10, 9, 8, 15, 10),
			Block.box(3, 10, 11, 8, 15, 12),
			Block.box(4, 11, 8, 7, 14, 9),
			Block.box(4, 11, 10, 7, 14, 11),
			Block.box(4, 11, 12, 7, 14, 13),
			Block.box(3, 10, 13, 8, 15, 14),
			Block.box(8, 10, 12, 13, 15, 13),
			Block.box(8, 10, 10, 13, 15, 11),
			Block.box(8, 10, 8, 13, 15, 9),
			Block.box(9, 11, 11, 12, 14, 12),
			Block.box(9, 11, 9, 12, 14, 10),
			Block.box(8, 10, 6, 13, 15, 7),
			Block.box(8, 10, 4, 13, 15, 5),
			Block.box(8, 10, 2, 13, 15, 3),
			Block.box(9, 11, 7, 12, 14, 8),
			Block.box(9, 11, 5, 12, 14, 6),
			Block.box(9, 11, 3, 12, 14, 4),
			Block.box(2, 0, 1, 4, 8, 3),
			Block.box(12, 0, 1, 14, 8, 3),
			Block.box(11, 11, 2, 14, 13, 14),
			Block.box(2, 11, 2, 5, 12, 14),
			Block.box(12, 0, 13, 14, 8, 15),
			Block.box(2, 0, 13, 4, 8, 15),
			Block.box(2, 8, 0, 3, 16, 16),
			Block.box(1, 13, 0, 2, 16, 16),
			Block.box(1, 8, 0, 2, 11, 16),
			Block.box(1, 11, 0, 2, 13, 7),
			Block.box(1, 11, 9, 2, 13, 16),
			Block.box(0, 10.5, 9, 1, 13.5, 9.5),
			Block.box(0, 10.5, 6.5, 1, 13.5, 7),
			Block.box(0, 13, 7, 1, 13.5, 9),
			Block.box(0, 10.5, 7, 1, 11, 9),
			Block.box(1.5, 11, 7, 2, 13, 9),
			Block.box(13, 8, 0, 15, 16, 16),
			Block.box(15, 9, 4, 16, 12, 12),
			Block.box(4, 11, 2, 7, 14, 15),
			Block.box(15, 12, 10, 16, 13, 12),
			Block.box(15, 12, 4, 16, 13, 6),
			Block.box(15, 12, 6, 15.5, 13, 10),
			Block.box(15, 13, 4, 16, 14, 12),
			Block.box(3, 8, 0, 13, 16, 2),
			Block.box(3, 8, 14, 13, 16, 16),
			Block.box(3, 8, 2, 13, 8, 14),
			Block.box(9, 11, 2, 12, 14, 14)
			).reduce((v1, v2) ->  Shapes.join(v1, v2, BooleanOp.OR)).get();
	private static final VoxelShape E = Stream.of(
			Block.box(11.463709677419356, 10, 3.544354838709676, 12.463709677419356, 15, 8.544354838709676),
			Block.box(10.463709677419356, 11, 4.544354838709676, 11.463709677419356, 14, 7.544354838709676),
			Block.box(9.463709677419356, 10, 3.544354838709676, 10.463709677419356, 15, 8.544354838709676),
			Block.box(8.463709677419356, 11, 4.544354838709676, 9.463709677419356, 14, 7.544354838709676),
			Block.box(7.463709677419355, 10, 3.544354838709676, 8.463709677419356, 15, 8.544354838709676),
			Block.box(5.463709677419355, 10, 3.544354838709676, 6.463709677419355, 15, 8.544354838709676),
			Block.box(3.463709677419355, 10, 3.544354838709676, 4.463709677419355, 15, 8.544354838709676),
			Block.box(6.463709677419355, 11, 4.544354838709676, 7.463709677419355, 14, 7.544354838709676),
			Block.box(4.463709677419355, 11, 4.544354838709676, 5.463709677419355, 14, 7.544354838709676),
			Block.box(2.463709677419355, 11, 4.544354838709676, 3.463709677419355, 14, 7.544354838709676),
			Block.box(1.463709677419355, 10, 3.544354838709676, 2.463709677419355, 15, 8.544354838709676),
			Block.box(2.463709677419355, 10, 8.544354838709676, 3.463709677419355, 15, 13.544354838709676),
			Block.box(4.463709677419355, 10, 8.544354838709676, 5.463709677419355, 15, 13.544354838709676),
			Block.box(6.463709677419355, 10, 8.544354838709676, 7.463709677419355, 15, 13.544354838709676),
			Block.box(3.463709677419355, 11, 9.544354838709676, 4.463709677419355, 14, 12.544354838709676),
			Block.box(5.463709677419355, 11, 9.544354838709676, 6.463709677419355, 14, 12.544354838709676),
			Block.box(8.463709677419356, 10, 8.544354838709676, 9.463709677419356, 15, 13.544354838709676),
			Block.box(10.463709677419356, 10, 8.544354838709676, 11.463709677419356, 15, 13.544354838709676),
			Block.box(12.463709677419356, 10, 8.544354838709676, 13.463709677419356, 15, 13.544354838709676),
			Block.box(7.463709677419355, 11, 9.544354838709676, 8.463709677419356, 14, 12.544354838709676),
			Block.box(9.463709677419356, 11, 9.544354838709676, 10.463709677419356, 14, 12.544354838709676),
			Block.box(11.463709677419356, 11, 9.544354838709676, 12.463709677419356, 14, 12.544354838709676),
			Block.box(12.463709677419356, 0, 2.544354838709676, 14.463709677419356, 8, 4.544354838709676),
			Block.box(12.463709677419356, 0, 12.544354838709676, 14.463709677419356, 8, 14.544354838709676),
			Block.box(1.463709677419355, 11, 11.544354838709676, 13.463709677419356, 13, 14.544354838709676),
			Block.box(1.463709677419355, 11, 2.544354838709676, 13.463709677419356, 12, 5.544354838709676),
			Block.box(0.463709677419355, 0, 12.544354838709676, 2.463709677419355, 8, 14.544354838709676),
			Block.box(0.463709677419355, 0, 2.544354838709676, 2.463709677419355, 8, 4.544354838709676),
			Block.box(-0.536290322580645, 8, 2.544354838709676, 15.463709677419356, 16, 3.544354838709676),
			Block.box(-0.536290322580645, 13, 1.5443548387096762, 15.463709677419356, 16, 2.544354838709676),
			Block.box(-0.536290322580645, 8, 1.5443548387096762, 15.463709677419356, 11, 2.544354838709676),
			Block.box(8.463709677419356, 11, 1.5443548387096762, 15.463709677419356, 13, 2.544354838709676),
			Block.box(-0.536290322580645, 11, 1.5443548387096762, 6.463709677419355, 13, 2.544354838709676),
			Block.box(5.963709677419355, 10.5, 0.5443548387096762, 6.463709677419355, 13.5, 1.5443548387096762),
			Block.box(8.463709677419356, 10.5, 0.5443548387096762, 8.963709677419356, 13.5, 1.5443548387096762),
			Block.box(6.463709677419355, 13, 0.5443548387096762, 8.463709677419356, 13.5, 1.5443548387096762),
			Block.box(6.463709677419355, 10.5, 0.5443548387096762, 8.463709677419356, 11, 1.5443548387096762),
			Block.box(6.463709677419355, 11, 2.044354838709676, 8.463709677419356, 13, 2.544354838709676),
			Block.box(-0.536290322580645, 8, 13.544354838709676, 15.463709677419356, 16, 15.544354838709676),
			Block.box(3.463709677419355, 9, 15.544354838709676, 11.463709677419356, 12, 16.544354838709676),
			Block.box(0.463709677419355, 11, 4.544354838709676, 13.463709677419356, 14, 7.544354838709676),
			Block.box(3.463709677419355, 12, 15.544354838709676, 5.463709677419355, 13, 16.544354838709676),
			Block.box(9.463709677419356, 12, 15.544354838709676, 11.463709677419356, 13, 16.544354838709676),
			Block.box(5.463709677419355, 12, 15.544354838709676, 9.463709677419356, 13, 16.044354838709676),
			Block.box(3.463709677419355, 13, 15.544354838709676, 11.463709677419356, 14, 16.544354838709676),
			Block.box(13.463709677419356, 8, 3.544354838709676, 15.463709677419356, 16, 13.544354838709676),
			Block.box(-0.536290322580645, 8, 3.544354838709676, 1.463709677419355, 16, 13.544354838709676),
			Block.box(1.463709677419355, 8, 3.544354838709676, 13.463709677419356, 8, 13.544354838709676),
			Block.box(1.463709677419355, 11, 9.544354838709676, 13.463709677419356, 14, 12.544354838709676)
			).reduce((v1, v2) -> Shapes.join(v1, v2, BooleanOp.OR)).get();
	private static final VoxelShape S = Stream.of(
			Block.box(6.919354838709679, 10, 12.008064516129032, 11.91935483870968, 15, 13.008064516129032),
			Block.box(7.919354838709679, 11, 11.008064516129032, 10.91935483870968, 14, 12.008064516129032),
			Block.box(6.919354838709679, 10, 10.008064516129032, 11.91935483870968, 15, 11.008064516129032),
			Block.box(7.919354838709679, 11, 9.008064516129032, 10.91935483870968, 14, 10.008064516129032),
			Block.box(6.919354838709679, 10, 8.008064516129032, 11.91935483870968, 15, 9.008064516129032),
			Block.box(6.919354838709679, 10, 6.008064516129032, 11.91935483870968, 15, 7.008064516129032),
			Block.box(6.919354838709679, 10, 4.008064516129032, 11.91935483870968, 15, 5.008064516129032),
			Block.box(7.919354838709679, 11, 7.008064516129032, 10.91935483870968, 14, 8.008064516129032),
			Block.box(7.919354838709679, 11, 5.008064516129032, 10.91935483870968, 14, 6.008064516129032),
			Block.box(7.919354838709679, 11, 3.008064516129032, 10.91935483870968, 14, 4.008064516129032),
			Block.box(6.919354838709679, 10, 2.008064516129032, 11.91935483870968, 15, 3.008064516129032),
			Block.box(1.9193548387096788, 10, 3.008064516129032, 6.919354838709679, 15, 4.008064516129032),
			Block.box(1.9193548387096788, 10, 5.008064516129032, 6.919354838709679, 15, 6.008064516129032),
			Block.box(1.9193548387096788, 10, 7.008064516129032, 6.919354838709679, 15, 8.008064516129032),
			Block.box(2.919354838709679, 11, 4.008064516129032, 5.919354838709679, 14, 5.008064516129032),
			Block.box(2.919354838709679, 11, 6.008064516129032, 5.919354838709679, 14, 7.008064516129032),
			Block.box(1.9193548387096788, 10, 9.008064516129032, 6.919354838709679, 15, 10.008064516129032),
			Block.box(1.9193548387096788, 10, 11.008064516129032, 6.919354838709679, 15, 12.008064516129032),
			Block.box(1.9193548387096788, 10, 13.008064516129032, 6.919354838709679, 15, 14.008064516129032),
			Block.box(2.919354838709679, 11, 8.008064516129032, 5.919354838709679, 14, 9.008064516129032),
			Block.box(2.919354838709679, 11, 10.008064516129032, 5.919354838709679, 14, 11.008064516129032),
			Block.box(2.919354838709679, 11, 12.008064516129032, 5.919354838709679, 14, 13.008064516129032),
			Block.box(10.91935483870968, 0, 13.008064516129032, 12.91935483870968, 8, 15.008064516129032),
			Block.box(0.9193548387096788, 0, 13.008064516129032, 2.919354838709679, 8, 15.008064516129032),
			Block.box(0.9193548387096788, 11, 2.008064516129032, 3.919354838709679, 13, 14.008064516129032),
			Block.box(9.91935483870968, 11, 2.008064516129032, 12.91935483870968, 12, 14.008064516129032),
			Block.box(0.9193548387096788, 0, 1.008064516129032, 2.919354838709679, 8, 3.008064516129032),
			Block.box(10.91935483870968, 0, 1.008064516129032, 12.91935483870968, 8, 3.008064516129032),
			Block.box(11.91935483870968, 8, 0.008064516129032029, 12.91935483870968, 16, 16.008064516129032),
			Block.box(12.91935483870968, 13, 0.008064516129032029, 13.91935483870968, 16, 16.008064516129032),
			Block.box(12.91935483870968, 8, 0.008064516129032029, 13.91935483870968, 11, 16.008064516129032),
			Block.box(12.91935483870968, 11, 9.008064516129032, 13.91935483870968, 13, 16.008064516129032),
			Block.box(12.91935483870968, 11, 0.008064516129032029, 13.91935483870968, 13, 7.008064516129032),
			Block.box(13.91935483870968, 10.5, 6.508064516129032, 14.91935483870968, 13.5, 7.008064516129032),
			Block.box(13.91935483870968, 10.5, 9.008064516129032, 14.91935483870968, 13.5, 9.508064516129032),
			Block.box(13.91935483870968, 13, 7.008064516129032, 14.91935483870968, 13.5, 9.008064516129032),
			Block.box(13.91935483870968, 10.5, 7.008064516129032, 14.91935483870968, 11, 9.008064516129032),
			Block.box(12.91935483870968, 11, 7.008064516129032, 13.41935483870968, 13, 9.008064516129032),
			Block.box(-0.08064516129032118, 8, 0.008064516129032029, 1.9193548387096788, 16, 16.008064516129032),
			Block.box(-1.0806451612903212, 9, 4.008064516129032, -0.08064516129032118, 12, 12.008064516129032),
			Block.box(7.919354838709679, 11, 1.008064516129032, 10.91935483870968, 14, 14.008064516129032),
			Block.box(-1.0806451612903212, 12, 4.008064516129032, -0.08064516129032118, 13, 6.008064516129032),
			Block.box(-1.0806451612903212, 12, 10.008064516129032, -0.08064516129032118, 13, 12.008064516129032),
			Block.box(-0.5806451612903212, 12, 6.008064516129032, -0.08064516129032118, 13, 10.008064516129032),
			Block.box(-1.0806451612903212, 13, 4.008064516129032, -0.08064516129032118, 14, 12.008064516129032),
			Block.box(1.9193548387096788, 8, 14.008064516129032, 11.91935483870968, 16, 16.008064516129032),
			Block.box(1.9193548387096788, 8, 0.008064516129032029, 11.91935483870968, 16, 2.008064516129032),
			Block.box(1.9193548387096788, 8, 2.008064516129032, 11.91935483870968, 8, 14.008064516129032),
			Block.box(2.919354838709679, 11, 2.008064516129032, 5.919354838709679, 14, 14.008064516129032)
			).reduce((v1, v2) -> Shapes.join(v1, v2, BooleanOp.OR)).get();
	private static final VoxelShape W = Stream.of(
			Block.box(6.919354838709679, 10, 12.008064516129032, 11.91935483870968, 15, 13.008064516129032),
			Block.box(7.919354838709679, 11, 11.008064516129032, 10.91935483870968, 14, 12.008064516129032),
			Block.box(6.919354838709679, 10, 10.008064516129032, 11.91935483870968, 15, 11.008064516129032),
			Block.box(7.919354838709679, 11, 9.008064516129032, 10.91935483870968, 14, 10.008064516129032),
			Block.box(6.919354838709679, 10, 8.008064516129032, 11.91935483870968, 15, 9.008064516129032),
			Block.box(6.919354838709679, 10, 6.008064516129032, 11.91935483870968, 15, 7.008064516129032),
			Block.box(6.919354838709679, 10, 4.008064516129032, 11.91935483870968, 15, 5.008064516129032),
			Block.box(7.919354838709679, 11, 7.008064516129032, 10.91935483870968, 14, 8.008064516129032),
			Block.box(7.919354838709679, 11, 5.008064516129032, 10.91935483870968, 14, 6.008064516129032),
			Block.box(7.919354838709679, 11, 3.008064516129032, 10.91935483870968, 14, 4.008064516129032),
			Block.box(6.919354838709679, 10, 2.008064516129032, 11.91935483870968, 15, 3.008064516129032),
			Block.box(1.9193548387096788, 10, 3.008064516129032, 6.919354838709679, 15, 4.008064516129032),
			Block.box(1.9193548387096788, 10, 5.008064516129032, 6.919354838709679, 15, 6.008064516129032),
			Block.box(1.9193548387096788, 10, 7.008064516129032, 6.919354838709679, 15, 8.008064516129032),
			Block.box(2.919354838709679, 11, 4.008064516129032, 5.919354838709679, 14, 5.008064516129032),
			Block.box(2.919354838709679, 11, 6.008064516129032, 5.919354838709679, 14, 7.008064516129032),
			Block.box(1.9193548387096788, 10, 9.008064516129032, 6.919354838709679, 15, 10.008064516129032),
			Block.box(1.9193548387096788, 10, 11.008064516129032, 6.919354838709679, 15, 12.008064516129032),
			Block.box(1.9193548387096788, 10, 13.008064516129032, 6.919354838709679, 15, 14.008064516129032),
			Block.box(2.919354838709679, 11, 8.008064516129032, 5.919354838709679, 14, 9.008064516129032),
			Block.box(2.919354838709679, 11, 10.008064516129032, 5.919354838709679, 14, 11.008064516129032),
			Block.box(2.919354838709679, 11, 12.008064516129032, 5.919354838709679, 14, 13.008064516129032),
			Block.box(10.91935483870968, 0, 13.008064516129032, 12.91935483870968, 8, 15.008064516129032),
			Block.box(0.9193548387096788, 0, 13.008064516129032, 2.919354838709679, 8, 15.008064516129032),
			Block.box(0.9193548387096788, 11, 2.008064516129032, 3.919354838709679, 13, 14.008064516129032),
			Block.box(9.91935483870968, 11, 2.008064516129032, 12.91935483870968, 12, 14.008064516129032),
			Block.box(0.9193548387096788, 0, 1.008064516129032, 2.919354838709679, 8, 3.008064516129032),
			Block.box(10.91935483870968, 0, 1.008064516129032, 12.91935483870968, 8, 3.008064516129032),
			Block.box(11.91935483870968, 8, 0.008064516129032029, 12.91935483870968, 16, 16.008064516129032),
			Block.box(12.91935483870968, 13, 0.008064516129032029, 13.91935483870968, 16, 16.008064516129032),
			Block.box(12.91935483870968, 8, 0.008064516129032029, 13.91935483870968, 11, 16.008064516129032),
			Block.box(12.91935483870968, 11, 9.008064516129032, 13.91935483870968, 13, 16.008064516129032),
			Block.box(12.91935483870968, 11, 0.008064516129032029, 13.91935483870968, 13, 7.008064516129032),
			Block.box(13.91935483870968, 10.5, 6.508064516129032, 14.91935483870968, 13.5, 7.008064516129032),
			Block.box(13.91935483870968, 10.5, 9.008064516129032, 14.91935483870968, 13.5, 9.508064516129032),
			Block.box(13.91935483870968, 13, 7.008064516129032, 14.91935483870968, 13.5, 9.008064516129032),
			Block.box(13.91935483870968, 10.5, 7.008064516129032, 14.91935483870968, 11, 9.008064516129032),
			Block.box(12.91935483870968, 11, 7.008064516129032, 13.41935483870968, 13, 9.008064516129032),
			Block.box(-0.08064516129032118, 8, 0.008064516129032029, 1.9193548387096788, 16, 16.008064516129032),
			Block.box(-1.0806451612903212, 9, 4.008064516129032, -0.08064516129032118, 12, 12.008064516129032),
			Block.box(7.919354838709679, 11, 1.008064516129032, 10.91935483870968, 14, 14.008064516129032),
			Block.box(-1.0806451612903212, 12, 4.008064516129032, -0.08064516129032118, 13, 6.008064516129032),
			Block.box(-1.0806451612903212, 12, 10.008064516129032, -0.08064516129032118, 13, 12.008064516129032),
			Block.box(-0.5806451612903212, 12, 6.008064516129032, -0.08064516129032118, 13, 10.008064516129032),
			Block.box(-1.0806451612903212, 13, 4.008064516129032, -0.08064516129032118, 14, 12.008064516129032),
			Block.box(1.9193548387096788, 8, 14.008064516129032, 11.91935483870968, 16, 16.008064516129032),
			Block.box(1.9193548387096788, 8, 0.008064516129032029, 11.91935483870968, 16, 2.008064516129032),
			Block.box(1.9193548387096788, 8, 2.008064516129032, 11.91935483870968, 8, 14.008064516129032),
			Block.box(2.919354838709679, 11, 2.008064516129032, 5.919354838709679, 14, 14.008064516129032)
			).reduce((v1, v2) -> Shapes.join(v1, v2, BooleanOp.OR)).get();
	public RecyclerBlock() {
		super(BlockBehaviour.Properties
				.of(Material.PISTON)
				.strength(4.5f,15)
				.sound(SoundType.METAL)
				.noOcclusion()
				.requiresCorrectToolForDrops());
	}
	
	
	@SuppressWarnings("deprecation")
	public void onRemove(BlockState state, Level level, BlockPos pos, BlockState secondState, boolean p_196243_5_) {
	      if (!state.is(secondState.getBlock())) {
	         BlockEntity TE = level.getBlockEntity(pos);
	         if (TE instanceof RecyclerEntity) {
	        	 RecyclerEntity RT = (RecyclerEntity)TE;
	            Containers.dropContents(level, pos, RT.getNNLInv());
	            level.updateNeighbourForOutputSignal(pos, this);
	         }

	         super.onRemove(state, level, pos, secondState, p_196243_5_);
	      }
	   }
	
	@Override
	public InteractionResult use(BlockState state, Level world, BlockPos pos, Player plr, InteractionHand hand, BlockHitResult RT) {
		if(!world.isClientSide) {
			BlockEntity TE = world.getBlockEntity(pos);
				if(!plr.isCrouching()) {
					if(TE instanceof RecyclerEntity) {
						MenuProvider containerProvider = createContainerProvider(world, pos);
						NetworkHooks.openGui(((ServerPlayer)plr), containerProvider, pos);
					} else {
						throw new IllegalStateException("Container provider is missing.");
					}
				}
		}
		return InteractionResult.SUCCESS;
	}

	private MenuProvider createContainerProvider(Level world, BlockPos pos) {
		return new MenuProvider() {
			@Override
			public Component getDisplayName() {
				return new TranslatableComponent("screen.pepsimc.recycler");
			}

			@Override
			public AbstractContainerMenu createMenu(int i, Inventory inv, Player plr) {
				return new RecyclerContainer(i, world, pos, inv, plr);
			}
		};  
	}

	@Override
	public RenderShape getRenderShape(BlockState p_60550_) {
		// TODO Auto-generated method stub
		return RenderShape.ENTITYBLOCK_ANIMATED;
	}
	
	@Override
	public BlockEntity newBlockEntity(BlockPos pos, BlockState state) {
		return PepsiMcBlockEntity.RECYCLER_TILE.get().create(pos, state);
	}

	@Override 
	public VoxelShape getShape(BlockState state, BlockGetter worldIn, BlockPos p, CollisionContext context) {
		 switch (state.getValue(FACING)) {
		 	case NORTH:
		 		return N;
		 	case EAST:
		 		return E;
		 	case SOUTH:
		 		return S;
		 	case WEST:
		 		return W;
		 	default:
		 		return N;
		 }
	}
	
}
